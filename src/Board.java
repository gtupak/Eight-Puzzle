import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JPanel;

public class Board extends JPanel implements ActionListener {

	private int attempts;
	private static final int NUM_OF_ROWS = 3;
	private static final int NUM_OF_COLUMS = 3;
	Cell [] [] grid;

	public Board(){
		setBackground(Color.WHITE);
		setLayout(new GridLayout(NUM_OF_ROWS, NUM_OF_COLUMS));

		grid = new Cell [NUM_OF_ROWS][NUM_OF_COLUMS];

		//GENERATE CELL (LOOP)
		for (int i = 0; i < NUM_OF_ROWS; i++){
			for (int j = 0; j < NUM_OF_COLUMS; j++){
				grid [i][j] = new Cell(this, i, j);
				add(grid[i][j]);
			}
		}
	}

	public void init(){
		RandomPermutation reset  = new RandomPermutation(NUM_OF_ROWS, NUM_OF_COLUMS);
		reset.shuffle();
		int [] place = reset.toArray();
		int index = 0;

		for (int i = 0; i < NUM_OF_ROWS; i++){
			for (int j = 0; j < NUM_OF_COLUMS; j++){
				grid[i][j].setId(place[index]);
				index++;
			}
		}
		attempts = 0;
	}

	//An object of the class Board is the action listener for all the events generated by the Cells
	public void actionPerformed(ActionEvent e) {

		if (e.getSource() instanceof Cell){
			Cell cell = (Cell)e.getSource();

			//Do the swap
			if (cell.getId() != 0 && adjacent(cell, cell.getRow(), cell.getColumn())){
				int id = cell.getId();

				//DO THE SWAP WITH ZERO, NOT WITH TWO CELLS
				//FIND THE ZERO
				//VERIFY IF IT WORKS, THEN SWAP

				boolean notFound = true;
				for (int i =0; i < NUM_OF_ROWS && notFound; i++){
					for (int j = 0; j < NUM_OF_COLUMS && notFound; j++){
						if(grid[i][j].getId() == 0){
							grid[i][j].setId(id);
							notFound = false;
						}
					}
				}
				cell.setId(0);

				//Increases number of attempts
				attempts++;

				//Checks if cells are in order, after the last swap
				boolean inOrder = true;
				int index = 1;
				for (int i = 0; i < NUM_OF_ROWS && inOrder; i++){
					for (int j = 0; j < NUM_OF_COLUMS && inOrder; j++){
						if(grid[i][j].getId() == index){
							index++;
						}
						else if(index == 9 && grid[i][j].getId() == 0){
						}
						else{
							inOrder = false;
						}
					}
				}
				if (inOrder){
					javax.swing.JOptionPane.showMessageDialog(null, ("You got it, congrats!" +
							System.getProperty("line.separator") + "Number of moves: " + attempts ));
					this.init();
				}

			}
		}
	}

	//Method to authorise a swap
	private boolean adjacent(Cell cell, int row, int col){
		boolean adjacent;

		//Finds the index of the cell
		int cellIndex = 0;
		boolean foundCellIndex = false;
		for (int i = 0; i < NUM_OF_ROWS && !foundCellIndex; i++){
			for (int j = 0; j <NUM_OF_COLUMS && !foundCellIndex; j++){
				if (i == row && j == col){
					foundCellIndex = true;
				}
				else{
					cellIndex++;
				}
			}
		}

		//Finds the index of the white space (0 cell)
		int whiteIndex = 0;
		boolean notFound = true;
		for (int i =0; i < NUM_OF_ROWS && notFound; i++){
			for (int j = 0; j < NUM_OF_COLUMS && notFound; j++){
				if(grid[i][j].getId() == 0){
					notFound = false;
				}
				else{
					whiteIndex++;
				}
			}
		}

		//Gives authorisation
		if (whiteIndex == 0 && (cellIndex == 1 || (cellIndex == 3)) ){
			adjacent = true;		
		}
		else if(whiteIndex == 1 && ((cellIndex == 0) || (cellIndex == 2) || (cellIndex == 4))){
			adjacent = true;		
		}
		else if (whiteIndex == 2 && ((cellIndex == 1) || (cellIndex == 5))){
			adjacent = true;		
		}
		else if(whiteIndex == 3 && ((cellIndex == 0) || (cellIndex == 4) || (cellIndex == 6))){
			adjacent = true;		
		}
		else if (whiteIndex == 4 && ((cellIndex == 1) || (cellIndex == 3) || (cellIndex == 5) || (cellIndex == 7))){
			adjacent = true;		
		}
		else if(whiteIndex == 5 && ((cellIndex == 2) || (cellIndex == 4) || (cellIndex == 8))){
			adjacent = true;		
		}
		else if (whiteIndex == 6 && ((cellIndex == 3) || (cellIndex == 7))){
			adjacent = true;		
		}
		else if(whiteIndex == 7 && ((cellIndex ==6) || (cellIndex == 4) || (cellIndex == 8))){
			adjacent = true;		
		}
		else if (whiteIndex == 8 && ((cellIndex == 5) || (cellIndex == 7))){
			adjacent = true;		
		}
		else {
			adjacent = false;
		}

		return adjacent;
	}

	public String toString(){
		String newLine = System.getProperty("line.separator");
		String result = new String();

		for (int i = 0; i<NUM_OF_ROWS; i++){
			for (int j = 0; j<NUM_OF_COLUMS; j++){
				result = result + "["+ grid[i][j].getId() +  "] ";
			}
			result = result + newLine;
		}
		result = result + "Number of moves is " + attempts;
		return result;
	}
}
